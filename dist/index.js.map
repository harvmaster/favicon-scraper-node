{
  "version": 3,
  "sources": ["../src/scrapers/fetch/getDOM.ts", "../src/scrapers/FaviconTags.ts", "../src/scrapers/fetch/extractFromDOM.ts", "../src/scrapers/fetch/formatFavicons.ts", "../src/scrapers/fetch/scrape.ts", "../src/types.ts", "../src/utils/extractDomain.ts", "../src/utils/probeIcon.ts", "../src/getFavicons.ts"],
  "sourcesContent": ["export const getHTML = async (url: string, agent: string): Promise<{ dom: string, res: Response }> => {\n  const res = await fetch(`https://${url}`, {\n    headers: {\n      'User-Agent': agent\n    }\n  })\n\n  return { dom: await res.text(), res }\n}\n\nexport default getHTML", "export const FAVICON_TAGS = [\n  'link[rel=\"icon\"]',\n  'link[rel*=\"shortcut\"]',\n  'link[rel*=\"apple-touch-icon\"]',\n  'link[rel*=\"msapplication-TileImage\"]',\n  'link[rel*=\"msapplication-square\"]',\n  'link[rel*=\"mask-icon\"]',\n  'link[rel*=\"fluid-icon\"]',\n  'meta[content*=\"favicon.ico\"]',\n  'meta[itemprop=\"image\"]'\n]", "import { FAVICON_TAGS } from \"../FaviconTags\";\n\nimport { load } from 'cheerio'\n\nexport const extractFromDOM = (dom: string): string[] => {\n  const $ = load(dom)\n\n  let icons: string[] = []\n\n  $(FAVICON_TAGS.join(', ')).map((i, element) => {\n    const href = $(element).attr('href');\n    if (href) return href\n\n    const content = $(element).attr('content');\n    if (content) return content\n\n    return null\n  }).get().forEach(icon => icons.push(icon));\n\n  // Href ends with favicon.ico or favicon*.ico\n  $('link[href$=\"favicon.ico\"], link[href*=\"favicon\"].ico').map((i, element) => {\n    const href = $(element).attr('href');\n    return href\n  }).get().forEach(icon => icons.push(icon));\n\n  return icons\n}\n\nexport default extractFromDOM", "export const formatFavicon = (favicon: string, url: string): string => {\n  if (favicon.startsWith('http')) {\n    return favicon;\n  }\n  if (favicon.startsWith('//')) {\n    return `https:${favicon}`;\n  }\n  if (favicon.startsWith('/')) {\n    return `${url}${favicon}`;\n  }\n  return `${url}/${favicon}`;\n}\n\nexport default formatFavicon;", "import type { Favicon } from \"../../types\";\n\nimport getDOM from './getDOM';\nimport extractFromDOM from \"./extractFromDOM\";\nimport formatFavicon from \"./formatFavicons\";\n\nexport const scrapeWithFetch = async (url: string, agent: string): Promise<Favicon[]> => {\n  const { dom, res } = await getDOM(url, agent);\n  const icons = extractFromDOM(dom);\n\n  const location = res.url.endsWith('/') ? res.url.slice(0, -1) : res.url;\n\n  const result = icons.map(icon => {\n    return {\n      src: formatFavicon(icon, location),\n      agent: agent\n    }\n  })\n\n  return result;\n}\n\nexport default scrapeWithFetch", "export type Favicon = {\n  src: string;\n  agent: string;\n};\n\nexport type ProbedFavicon = Favicon & {\n  size?: {\n    width: number;\n    height: number;\n  };\n  type: string;\n  mime: string;\n}\n\nexport type FaviconOptions = {\n  agent: string\n  manifest: boolean\n  scraper: FaviconScraper\n  probe: boolean\n}\n\nexport const DefaultFaviconOptions: FaviconOptions = {\n  agent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3',\n  manifest: false,\n  scraper: 'fetch',\n  probe: false\n} as const\n\nexport const SCRAPERS = {\n  FETCH: 'fetch',\n} as const\nexport type FaviconScraper = typeof SCRAPERS[keyof typeof SCRAPERS];\n\n// export type getFavicons = <T extends FaviconOptions = typeof DefaultFaviconOptions>(domain: string, options?: T) => Promise<T[\"probe\"] extends true ? ProbedFavicon : Favicon>;\n", "export const extractDomain = (url: string): string => {\n  const domainRegex = /^(?:https?:\\/\\/)?(?:[^@\\/\\n]+@)?(?:\\.)?([^:\\/\\n]+)/im;\n  const match = url.match(domainRegex);\n  if (!match) {\n    throw new Error('Invalid URL');\n  }\n  return match[1];\n};\n\nexport default extractDomain;", "import type { Favicon, ProbedFavicon } from \"../types\";\n\nimport probe from 'probe-image-size';\n\nexport const probeIcon = async (favicon: Favicon): Promise<ProbedFavicon> => {\n  const result = await probe(favicon.src);\n\n  return {\n    src: favicon.src,\n    size: {\n      width: result.width,\n      height: result.height\n    },\n    type: result.type,\n    mime: result.mime,\n    agent: favicon.agent\n  }\n}\n\nexport default probeIcon", "import { scrapeWithFetch } from \"./scrapers\";\nimport { DefaultFaviconOptions, type Favicon, type FaviconOptions, type ProbedFavicon } from \"./types\";\n\nimport { extractDomain, probeIcon } from \"./utils\";\n\n// Dont probe\nexport default async function getFavicons (domain: string): Promise<Favicon[]>;\nexport default async function getFavicons <T extends Partial<FaviconOptions> & {probe?: false | undefined}>(domain: string, options?: T): Promise<Favicon[]>;\n// Probe\nexport default async function getFavicons <T extends Partial<FaviconOptions> & {probe: true}>(domain: string, options?: T): Promise<ProbedFavicon[]>;\n// generic\nexport default async function getFavicons <T extends Partial<FaviconOptions>>(domain: string, options?: T): Promise<ProbedFavicon[] | Favicon[]> {\n  const { agent, manifest, scraper, probe } = { ...DefaultFaviconOptions, ...options };\n  const url = extractDomain(domain);\n  \n  let scrapeFn = scrapeWithFetch;\n  if (scraper === 'fetch') {\n    scrapeFn = scrapeWithFetch\n  }\n\n  const favicons: Favicon[] = await scrapeFn(url, agent);\n\n  if (probe == false) {\n    return favicons\n  }\n\n  const probedFavicons: ProbedFavicon[] = await Promise.all(favicons.map(favicon => probeIcon(favicon)));\n\n  return probedFavicons;\n}"],
  "mappings": "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",
  "names": ["probe"]
}
